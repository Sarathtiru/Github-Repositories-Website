{"version":3,"sources":["assets/Github_logo_PNG1.png","components/Navbar/Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","Fragment","className","to","src","Image","alt","App","useState","itemsArray","setItemsArray","languageArray","setlanguageArray","textContent","settextContent","pageNum","setpageNum","itemCount","setitemCount","useEffect","a","fetch","json","items","console","log","fetchApi","totalPages","length","Math","round","filteredArr","Array","from","Set","map","val","language","langHandler","e","updatedArray","filter","item","currentTarget","prevState","updatedState","onClick","sort","index","slice","owner","avatar_url","name","login","stargazers_count","disabled","style","color","border","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0f241a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Github_logo_PNG1.f4213b43.png\";","import React from \"react\";\r\n\r\nimport \"./Navbar.css\";\r\nimport Image from \"../../assets/Github_logo_PNG1.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <header className=\"toolbar\">\r\n        <nav className=\"toolbar__navigation\">\r\n          <div className=\"toolbar__logo\">\r\n            <Link to=\"/\">\r\n              <img src={Image} alt=\"git\" />\r\n            </Link>\r\n          </div>\r\n          <p>Github Repositories</p>\r\n          <div className=\"toolbar_navigation-items\">\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/battle\">Battle</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/\">Popular</Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </header>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\n\ninterface itemApi {\n  name: string;\n  owner: {\n    avatar_url: string;\n    login: string;\n  };\n  stargazers_count: number;\n  language: string;\n}\n\nconst App: React.FC = () => {\n  const [itemsArray, setItemsArray] = useState<itemApi[]>([]);\n  const [languageArray, setlanguageArray] = useState<itemApi[]>([]);\n  const [textContent, settextContent] = useState(\"All\");\n  const [pageNum, setpageNum] = useState(1);\n  const [itemCount, setitemCount] = useState(0);\n\n  useEffect(() => {\n    const fetchApi = async (): Promise<itemApi[]> => {\n      try {\n        const { items } = await (\n          await fetch(\n            \"https://api.github.com/search/repositories?q=stars:>10000&sort=stars\"\n          )\n        ).json();\n        setItemsArray(items);\n        return items;\n      } catch (err) {\n        console.log(err);\n        return err;\n      }\n    };\n    fetchApi();\n  }, []);\n\n  let totalPages =\n    languageArray.length > 0\n      ? Math.round(languageArray.length / 5)\n      : Math.round(itemsArray.length / 5);\n  totalPages === 0 && (totalPages = 1);\n  // let filteredArr: string[] = [];\n  // for (let i = 0; i < itemsArray.length; i++) {\n  //   if (!filteredArr.includes(itemsArray[i].language)) {\n  //     filteredArr.push(itemsArray[i].language);\n  //   }\n  // }\n  const filteredArr = Array.from(\n    new Set(itemsArray.map((val) => val.language))\n  );\n\n  const langHandler = (e: React.MouseEvent) => {\n    // console.log(e.currentTarget.textContent);\n\n    const updatedArray = itemsArray.filter((item) => {\n      return item.language === e.currentTarget.textContent;\n    });\n    console.log(updatedArray);\n    setlanguageArray((prevState) => {\n      let updatedState = [...prevState];\n      updatedState.length = 0;\n      updatedState = [...updatedArray];\n      return updatedState;\n    });\n    settextContent(e.currentTarget.textContent as string);\n    setpageNum(1);\n    setitemCount(0);\n  };\n\n  const PageDecrementHandler = (e: React.MouseEvent) => {\n    setitemCount(itemCount - 5);\n    setpageNum(pageNum - 1);\n  };\n\n  const pageIncremnentHandler = (e: React.MouseEvent) => {\n    setitemCount(itemCount + 5);\n    setpageNum(pageNum + 1);\n  };\n\n  return (\n    <React.Fragment>\n      <Navbar />\n      <div className=\"language\">\n        <span\n          className={textContent === \"All\" ? \"clicked\" : \"\"}\n          onClick={() => {\n            setlanguageArray((prevState) => {\n              let updatedState = [...prevState];\n              updatedState.length = 0;\n              return updatedState;\n            });\n            settextContent(\"All\");\n          }}\n        >\n          All\n        </span>\n        {filteredArr.sort().map((language, index) => (\n          <span\n            key={index}\n            onClick={langHandler}\n            className={textContent === language ? \"clicked\" : \"\"}\n          >\n            {language}\n          </span>\n        ))}\n      </div>\n      <div className=\"App\">\n        {languageArray.length > 0\n          ? languageArray\n              .slice(itemCount, itemCount + 5)\n              .map((item: itemApi, index) => {\n                return (\n                  <div key={index} className=\"item\">\n                    <p>#{index + 1}</p>\n                    <div className=\"image\">\n                      <img src={item.owner.avatar_url} alt=\"pic\" />\n                    </div>\n\n                    <p>{item.name}</p>\n                    <p>@{item.owner.login}</p>\n                    <p>{item.stargazers_count} stars</p>\n                  </div>\n                );\n              })\n          : itemsArray\n              .slice(itemCount, itemCount + 5)\n              .map((item: itemApi, index) => {\n                return (\n                  <div key={index} className=\"item\">\n                    <p>#{index + 1}</p>\n                    <div className=\"image\">\n                      <img src={item.owner.avatar_url} alt=\"pic\" />\n                    </div>\n\n                    <p>{item.name}</p>\n                    <p>@{item.owner.login}</p>\n                    <p>{item.stargazers_count} stars</p>\n                  </div>\n                );\n              })}\n      </div>\n\n      <div className=\"page\">\n        <button\n          className=\"prev\"\n          onClick={() => {\n            setitemCount(itemCount - 5);\n            setpageNum(pageNum - 1);\n          }}\n          disabled={pageNum === 1 ? true : false}\n        >\n          Prev\n        </button>\n        <span>\n          {/* {pageNum}/{totalPages} */}\n          {pageNum > 1 ? (\n            <button onClick={PageDecrementHandler}>{pageNum - 1}</button>\n          ) : null}\n          <button\n            style={{\n              color: \"red\",\n              border: \"2px solid red\",\n              margin: \"5px\",\n            }}\n          >\n            {pageNum}\n          </button>\n          {pageNum !== totalPages && (\n            <button onClick={pageIncremnentHandler}>{pageNum + 1}</button>\n          )}\n          <span> ... {totalPages}</span>\n        </span>\n        <button\n          className=\"next\"\n          onClick={() => {\n            setitemCount(itemCount + 5);\n            setpageNum(pageNum + 1);\n          }}\n          disabled={pageNum >= totalPages ? true : false}\n        >\n          Next\n        </button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/ie9\";\nimport \"react-app-polyfill/stable\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n    \n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}